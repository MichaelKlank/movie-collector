name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

permissions:
    contents: write
    pull-requests: write

jobs:
    version:
        runs-on: ubuntu-latest
        outputs:
            major_version: ${{ steps.set_version.outputs.major_version }}
            minor_version: ${{ steps.set_version.outputs.minor_version }}
            patch_version: ${{ steps.set_version.outputs.patch_version }}
            build_hash: ${{ steps.set_version.outputs.build_hash }}
            version_string: ${{ steps.set_version.outputs.version_string }}

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Generate Version
              id: set_version
              run: ./scripts/generate-version.sh

    backend:
        runs-on: ubuntu-latest
        needs: version
        defaults:
            run:
                working-directory: ./backend

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.24"

            - name: Update Version Constants
              run: |
                  # Erstelle Version-Datei falls noch nicht vorhanden
                  mkdir -p version
                  cat > version/version.go << EOL
                  package version

                  import (
                      "fmt"
                      "time"
                  )

                  var (
                      // Major Version, startet bei 1
                      Major = ${{ needs.version.outputs.major_version }}
                      // Minor Version, basiert auf der aktuellen Kalenderwoche
                      Minor = ${{ needs.version.outputs.minor_version }}
                      // Patch Version, wird durch CI/CD-Pipeline gesetzt
                      Patch = ${{ needs.version.outputs.patch_version }}
                      // BuildHash, wird durch CI/CD-Pipeline gesetzt
                      BuildHash = "${{ needs.version.outputs.build_hash }}"
                  )

                  // Version gibt die aktuelle Version als String zurÃ¼ck
                  func Version() string {
                      return fmt.Sprintf("%d.%d.%d-%s", Major, Minor, Patch, BuildHash)
                  }

                  // getCalendarWeek berechnet die aktuelle Kalenderwoche
                  func getCalendarWeek() int {
                      _, week := time.Now().ISOWeek()
                      return week
                  }
                  EOL

            - name: Cache Go modules
              uses: actions/cache@v4
              with:
                  path: ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Install dependencies
              run: go mod download

            - name: Check for outdated dependencies
              run: go mod tidy

            - name: Install cyclonedx-gomod
              run: go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest

            - name: Generate Backend SBOM
              run: |
                  go mod tidy
                  cyclonedx-gomod mod -json -licenses -assert-licenses -output sbom.json

            - name: Install golangci-lint
              run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

            - name: Run golangci-lint
              run: golangci-lint run

            - name: Run tests with coverage
              run: go test -v -coverprofile=coverage.out ./...

            - name: Build
              run: go build -v ./...

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: backend-binary
                  path: ./backend
                  retention-days: 5

            - name: Commit and push Backend SBOM if changed
              if: github.event_name == 'push'
              run: |
                  cd ${{ github.workspace }}
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add backend/sbom.json backend/version/version.go
                  if ! git diff --quiet && ! git diff --staged --quiet; then
                      git commit -m "ci: update backend SBOM and version"
                      git fetch origin
                      git reset --hard origin/main
                      git push
                  fi

    frontend:
        runs-on: ubuntu-latest
        needs: version
        defaults:
            run:
                working-directory: ./frontend

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "22"

            - name: Cache npm dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Install dependencies
              run: npm ci

            - name: Generate Frontend SBOM
              run: |
                  npm install
                  npx @cyclonedx/cyclonedx-npm --output-file public/sbom.json
                  jq '.serialNumber = "urn:uuid:00000000-0000-0000-0000-000000000000" | .metadata.timestamp = "2024-01-01T00:00:00.000Z"' public/sbom.json > public/sbom.json.tmp && mv public/sbom.json.tmp public/sbom.json

            - name: Run linter
              run: npm run lint

            - name: Run tests with coverage
              run: npm test -- --coverage

            - name: Build
              env:
                  VITE_APP_VERSION: ${{ needs.version.outputs.version_string }}
              run: npm run build

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: frontend-build
                  path: ./frontend/dist
                  retention-days: 5

            - name: Commit and push Frontend SBOM if changed
              if: github.event_name == 'push'
              run: |
                  cd ${{ github.workspace }}
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add frontend/public/sbom.json
                  if ! git diff --quiet && ! git diff --staged --quiet; then
                      git commit -m "ci: update frontend SBOM"
                      git fetch origin
                      git reset --hard origin/main
                      git push
                  fi
