services:
    traefik:
        image: traefik:v2.10
        command:
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.traefik.address=:8080"
        ports:
            - "80:80"
            - "8080:8080"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - app-network

    redis:
        image: redis:alpine
        container_name: movie-collector-redis
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        networks:
            - app-network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 5s
            retries: 5

    backend:
        build:
            context: .
            dockerfile: backend/Dockerfile
        environment:
            - DATABASE_URL=postgresql://postgres:postgres@db:5432/dvd_collection
            - TMDB_API_KEY=${TMDB_API_KEY}
            - API_HOST=localhost
            - REDIS_HOST=redis:6379
            - REDIS_PASSWORD=
            - REDIS_DB=0
        volumes:
            - ./backend/docs:/app/docs
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - app-network
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.backend-api.rule=PathPrefix(`/api`)"
            - "traefik.http.routers.backend-api.entrypoints=web"
            - "traefik.http.services.backend.loadbalancer.server.port=8080"
            - "traefik.http.middlewares.backend-strip.stripprefix.prefixes=/api"
            - "traefik.http.routers.backend-api.middlewares=backend-strip,backend-cors"
            - "traefik.http.routers.swagger.rule=PathPrefix(`/swagger`) || PathPrefix(`/docs`)"
            - "traefik.http.routers.swagger.entrypoints=web"
            - "traefik.http.routers.swagger.service=backend"
            - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
            - "traefik.http.middlewares.backend-cors.headers.accesscontrolalloworiginlist=http://localhost:5173,http://localhost:3000,http://localhost,http://localhost:8082"
            - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowheaders=Origin,Content-Type,Authorization,Access-Control-Request-Method,Access-Control-Request-Headers"
            - "traefik.http.middlewares.backend-cors.headers.accesscontrolmaxage=43200"
        ports:
            - "8082:8080"
    frontend:
        build:
            context: .
            dockerfile: frontend/Dockerfile
        environment:
            - ME_APP_BACKEND_URL=http://localhost/api
        depends_on:
            - backend
        networks:
            - app-network
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.frontend.rule=PathPrefix(`/app/movie`)"
            - "traefik.http.routers.frontend.entrypoints=web"
            - "traefik.http.services.frontend.loadbalancer.server.port=80"
            - "traefik.http.middlewares.frontend-strip.stripprefix.prefixes=/app/movie"
            - "traefik.http.routers.frontend.middlewares=frontend-strip"

    db:
        image: postgres:15-alpine
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=dvd_collection
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - app-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
        ports:
            - "5432:5432"

    pgadmin:
        image: dpage/pgadmin4
        environment:
            - PGADMIN_DEFAULT_EMAIL=admin@admin.com
            - PGADMIN_DEFAULT_PASSWORD=admin
            - PGADMIN_CONFIG_SERVER_MODE=False
            - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
            - SCRIPT_NAME=/pgadmin
        volumes:
            - ./pgadmin-servers.json:/pgadmin4/servers.json
        networks:
            - app-network
        depends_on:
            - db
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.pgadmin.entrypoints=web"
            - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
            - "traefik.http.routers.pgadmin.rule=PathPrefix(`/pgadmin`)"
            - "traefik.http.middlewares.pgadmin-headers.headers.customrequestheaders.X-Script-Name=/pgadmin"
            - "traefik.http.routers.pgadmin.middlewares=pgadmin-headers"

volumes:
    postgres_data:
    redis_data:

networks:
    app-network:
        driver: bridge
